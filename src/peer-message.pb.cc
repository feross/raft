// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer-message.proto

#include "peer-message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace proto {
class PeerMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PeerMessage>
      _instance;
} _PeerMessage_default_instance_;
}  // namespace proto
namespace protobuf_peer_2dmessage_2eproto {
static void InitDefaultsPeerMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_PeerMessage_default_instance_;
    new (ptr) ::proto::PeerMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::PeerMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PeerMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPeerMessage}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PeerMessage.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::PeerMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::PeerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::PeerMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::PeerMessage, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::PeerMessage, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::PeerMessage, prev_log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::PeerMessage, prev_log_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::PeerMessage, entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::PeerMessage, leader_commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::PeerMessage, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::PeerMessage, last_log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::PeerMessage, last_log_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto::PeerMessage, vote_granted_),
  1,
  2,
  0,
  3,
  4,
  ~0u,
  5,
  7,
  6,
  9,
  8,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::proto::PeerMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::_PeerMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "peer-message.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022peer-message.proto\022\005proto\"\202\003\n\013PeerMess"
      "age\022,\n\004type\030\001 \002(\0162\036.proto.PeerMessage.Me"
      "ssageType\022\014\n\004term\030\002 \002(\005\022\021\n\tserver_id\030\003 \002"
      "(\t\022\026\n\016prev_log_index\030\004 \001(\005\022\025\n\rprev_log_t"
      "erm\030\005 \001(\005\022\017\n\007entries\030\006 \003(\t\022\025\n\rleader_com"
      "mit\030\007 \001(\005\022\017\n\007success\030\010 \001(\010\022\026\n\016last_log_i"
      "ndex\030\t \001(\005\022\025\n\rlast_log_term\030\n \001(\005\022\024\n\014vot"
      "e_granted\030\013 \001(\010\"w\n\013MessageType\022\031\n\025APPEND"
      "ENTRIES_REQUEST\020\000\022\032\n\026APPENDENTRIES_RESPO"
      "NSE\020\001\022\027\n\023REQUESTVOTE_REQUEST\020\002\022\030\n\024REQUES"
      "TVOTE_RESPONSE\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 416);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "peer-message.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_peer_2dmessage_2eproto
namespace proto {
const ::google::protobuf::EnumDescriptor* PeerMessage_MessageType_descriptor() {
  protobuf_peer_2dmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_peer_2dmessage_2eproto::file_level_enum_descriptors[0];
}
bool PeerMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PeerMessage_MessageType PeerMessage::APPENDENTRIES_REQUEST;
const PeerMessage_MessageType PeerMessage::APPENDENTRIES_RESPONSE;
const PeerMessage_MessageType PeerMessage::REQUESTVOTE_REQUEST;
const PeerMessage_MessageType PeerMessage::REQUESTVOTE_RESPONSE;
const PeerMessage_MessageType PeerMessage::MessageType_MIN;
const PeerMessage_MessageType PeerMessage::MessageType_MAX;
const int PeerMessage::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void PeerMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerMessage::kTypeFieldNumber;
const int PeerMessage::kTermFieldNumber;
const int PeerMessage::kServerIdFieldNumber;
const int PeerMessage::kPrevLogIndexFieldNumber;
const int PeerMessage::kPrevLogTermFieldNumber;
const int PeerMessage::kEntriesFieldNumber;
const int PeerMessage::kLeaderCommitFieldNumber;
const int PeerMessage::kSuccessFieldNumber;
const int PeerMessage::kLastLogIndexFieldNumber;
const int PeerMessage::kLastLogTermFieldNumber;
const int PeerMessage::kVoteGrantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerMessage::PeerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_peer_2dmessage_2eproto::scc_info_PeerMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PeerMessage)
}
PeerMessage::PeerMessage(const PeerMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_id()) {
    server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_log_term_) -
    reinterpret_cast<char*>(&type_)) + sizeof(last_log_term_));
  // @@protoc_insertion_point(copy_constructor:proto.PeerMessage)
}

void PeerMessage::SharedCtor() {
  server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_log_term_) -
      reinterpret_cast<char*>(&type_)) + sizeof(last_log_term_));
}

PeerMessage::~PeerMessage() {
  // @@protoc_insertion_point(destructor:proto.PeerMessage)
  SharedDtor();
}

void PeerMessage::SharedDtor() {
  server_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PeerMessage::descriptor() {
  ::protobuf_peer_2dmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PeerMessage& PeerMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_peer_2dmessage_2eproto::scc_info_PeerMessage.base);
  return *internal_default_instance();
}


void PeerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PeerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    server_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&type_)) + sizeof(success_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&vote_granted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_log_term_) -
        reinterpret_cast<char*>(&vote_granted_)) + sizeof(last_log_term_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PeerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PeerMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.PeerMessage.MessageType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::PeerMessage_MessageType_IsValid(value)) {
            set_type(static_cast< ::proto::PeerMessage_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string server_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_id().data(), static_cast<int>(this->server_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.PeerMessage.server_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 prev_log_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_prev_log_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 prev_log_term = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_prev_log_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_log_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string entries = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_entries()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entries(this->entries_size() - 1).data(),
            static_cast<int>(this->entries(this->entries_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.PeerMessage.entries");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 leader_commit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_leader_commit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool success = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_log_index = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_last_log_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_log_term = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_last_log_term();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_log_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool vote_granted = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_vote_granted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vote_granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PeerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PeerMessage)
  return false;
#undef DO_
}

void PeerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PeerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.PeerMessage.MessageType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 term = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->term(), output);
  }

  // required string server_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), static_cast<int>(this->server_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.PeerMessage.server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->server_id(), output);
  }

  // optional int32 prev_log_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prev_log_index(), output);
  }

  // optional int32 prev_log_term = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prev_log_term(), output);
  }

  // repeated string entries = 6;
  for (int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entries(i).data(), static_cast<int>(this->entries(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.PeerMessage.entries");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->entries(i), output);
  }

  // optional int32 leader_commit = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->leader_commit(), output);
  }

  // optional bool success = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->success(), output);
  }

  // optional int32 last_log_index = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->last_log_index(), output);
  }

  // optional int32 last_log_term = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->last_log_term(), output);
  }

  // optional bool vote_granted = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->vote_granted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PeerMessage)
}

::google::protobuf::uint8* PeerMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PeerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.PeerMessage.MessageType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 term = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->term(), target);
  }

  // required string server_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_id().data(), static_cast<int>(this->server_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.PeerMessage.server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_id(), target);
  }

  // optional int32 prev_log_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prev_log_index(), target);
  }

  // optional int32 prev_log_term = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prev_log_term(), target);
  }

  // repeated string entries = 6;
  for (int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entries(i).data(), static_cast<int>(this->entries(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.PeerMessage.entries");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->entries(i), target);
  }

  // optional int32 leader_commit = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->leader_commit(), target);
  }

  // optional bool success = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->success(), target);
  }

  // optional int32 last_log_index = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->last_log_index(), target);
  }

  // optional int32 last_log_term = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->last_log_term(), target);
  }

  // optional bool vote_granted = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->vote_granted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PeerMessage)
  return target;
}

size_t PeerMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.PeerMessage)
  size_t total_size = 0;

  if (has_server_id()) {
    // required string server_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_id());
  }

  if (has_type()) {
    // required .proto.PeerMessage.MessageType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_term()) {
    // required int32 term = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  return total_size;
}
size_t PeerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PeerMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string server_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_id());

    // required .proto.PeerMessage.MessageType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required int32 term = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string entries = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->entries_size());
  for (int i = 0, n = this->entries_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->entries(i));
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional int32 prev_log_index = 4;
    if (has_prev_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_log_index());
    }

    // optional int32 prev_log_term = 5;
    if (has_prev_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_log_term());
    }

    // optional int32 leader_commit = 7;
    if (has_leader_commit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader_commit());
    }

    // optional int32 last_log_index = 9;
    if (has_last_log_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_log_index());
    }

    // optional bool success = 8;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool vote_granted = 11;
    if (has_vote_granted()) {
      total_size += 1 + 1;
    }

    // optional int32 last_log_term = 10;
    if (has_last_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_log_term());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PeerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PeerMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PeerMessage)
    MergeFrom(*source);
  }
}

void PeerMessage::MergeFrom(const PeerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PeerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_server_id();
      server_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000008u) {
      prev_log_index_ = from.prev_log_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      prev_log_term_ = from.prev_log_term_;
    }
    if (cached_has_bits & 0x00000020u) {
      leader_commit_ = from.leader_commit_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_log_index_ = from.last_log_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      vote_granted_ = from.vote_granted_;
    }
    if (cached_has_bits & 0x00000200u) {
      last_log_term_ = from.last_log_term_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PeerMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PeerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerMessage::CopyFrom(const PeerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PeerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PeerMessage::Swap(PeerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerMessage::InternalSwap(PeerMessage* other) {
  using std::swap;
  entries_.InternalSwap(CastToBase(&other->entries_));
  server_id_.Swap(&other->server_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(term_, other->term_);
  swap(prev_log_index_, other->prev_log_index_);
  swap(prev_log_term_, other->prev_log_term_);
  swap(leader_commit_, other->leader_commit_);
  swap(last_log_index_, other->last_log_index_);
  swap(success_, other->success_);
  swap(vote_granted_, other->vote_granted_);
  swap(last_log_term_, other->last_log_term_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PeerMessage::GetMetadata() const {
  protobuf_peer_2dmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_peer_2dmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::proto::PeerMessage* Arena::CreateMaybeMessage< ::proto::PeerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::proto::PeerMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
