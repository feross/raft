// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peermessage.proto

#ifndef PROTOBUF_INCLUDED_peermessage_2eproto
#define PROTOBUF_INCLUDED_peermessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_peermessage_2eproto 

namespace protobuf_peermessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_peermessage_2eproto
namespace proto {
class PeerMessage;
class PeerMessageDefaultTypeInternal;
extern PeerMessageDefaultTypeInternal _PeerMessage_default_instance_;
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::PeerMessage* Arena::CreateMaybeMessage<::proto::PeerMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {

enum PeerMessage_MessageType {
  PeerMessage_MessageType_APPENDENTRIES_REQUEST = 0,
  PeerMessage_MessageType_APPENDENTRIES_RESPONSE = 1,
  PeerMessage_MessageType_REQUESTVOTE_REQUEST = 2,
  PeerMessage_MessageType_REQUESTVOTE_RESPONSE = 3
};
bool PeerMessage_MessageType_IsValid(int value);
const PeerMessage_MessageType PeerMessage_MessageType_MessageType_MIN = PeerMessage_MessageType_APPENDENTRIES_REQUEST;
const PeerMessage_MessageType PeerMessage_MessageType_MessageType_MAX = PeerMessage_MessageType_REQUESTVOTE_RESPONSE;
const int PeerMessage_MessageType_MessageType_ARRAYSIZE = PeerMessage_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PeerMessage_MessageType_descriptor();
inline const ::std::string& PeerMessage_MessageType_Name(PeerMessage_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PeerMessage_MessageType_descriptor(), value);
}
inline bool PeerMessage_MessageType_Parse(
    const ::std::string& name, PeerMessage_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PeerMessage_MessageType>(
    PeerMessage_MessageType_descriptor(), name, value);
}
// ===================================================================

class PeerMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PeerMessage) */ {
 public:
  PeerMessage();
  virtual ~PeerMessage();

  PeerMessage(const PeerMessage& from);

  inline PeerMessage& operator=(const PeerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PeerMessage(PeerMessage&& from) noexcept
    : PeerMessage() {
    *this = ::std::move(from);
  }

  inline PeerMessage& operator=(PeerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerMessage* internal_default_instance() {
    return reinterpret_cast<const PeerMessage*>(
               &_PeerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PeerMessage* other);
  friend void swap(PeerMessage& a, PeerMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PeerMessage* New() const final {
    return CreateMaybeMessage<PeerMessage>(NULL);
  }

  PeerMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PeerMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PeerMessage& from);
  void MergeFrom(const PeerMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PeerMessage_MessageType MessageType;
  static const MessageType APPENDENTRIES_REQUEST =
    PeerMessage_MessageType_APPENDENTRIES_REQUEST;
  static const MessageType APPENDENTRIES_RESPONSE =
    PeerMessage_MessageType_APPENDENTRIES_RESPONSE;
  static const MessageType REQUESTVOTE_REQUEST =
    PeerMessage_MessageType_REQUESTVOTE_REQUEST;
  static const MessageType REQUESTVOTE_RESPONSE =
    PeerMessage_MessageType_REQUESTVOTE_RESPONSE;
  static inline bool MessageType_IsValid(int value) {
    return PeerMessage_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    PeerMessage_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    PeerMessage_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    PeerMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return PeerMessage_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return PeerMessage_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return PeerMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sender_id = 3;
  bool has_sender_id() const;
  void clear_sender_id();
  static const int kSenderIdFieldNumber = 3;
  const ::std::string& sender_id() const;
  void set_sender_id(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_id(::std::string&& value);
  #endif
  void set_sender_id(const char* value);
  void set_sender_id(const char* value, size_t size);
  ::std::string* mutable_sender_id();
  ::std::string* release_sender_id();
  void set_allocated_sender_id(::std::string* sender_id);

  // required .proto.PeerMessage.MessageType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::proto::PeerMessage_MessageType type() const;
  void set_type(::proto::PeerMessage_MessageType value);

  // required int32 term = 2;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::google::protobuf::int32 term() const;
  void set_term(::google::protobuf::int32 value);

  // optional bool success = 4;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 4;
  bool success() const;
  void set_success(bool value);

  // optional bool vote_granted = 5;
  bool has_vote_granted() const;
  void clear_vote_granted();
  static const int kVoteGrantedFieldNumber = 5;
  bool vote_granted() const;
  void set_vote_granted(bool value);

  // @@protoc_insertion_point(class_scope:proto.PeerMessage)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_term();
  void clear_has_term();
  void set_has_sender_id();
  void clear_has_sender_id();
  void set_has_success();
  void clear_has_success();
  void set_has_vote_granted();
  void clear_has_vote_granted();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sender_id_;
  int type_;
  ::google::protobuf::int32 term_;
  bool success_;
  bool vote_granted_;
  friend struct ::protobuf_peermessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PeerMessage

// required .proto.PeerMessage.MessageType type = 1;
inline bool PeerMessage::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PeerMessage::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PeerMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PeerMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::proto::PeerMessage_MessageType PeerMessage::type() const {
  // @@protoc_insertion_point(field_get:proto.PeerMessage.type)
  return static_cast< ::proto::PeerMessage_MessageType >(type_);
}
inline void PeerMessage::set_type(::proto::PeerMessage_MessageType value) {
  assert(::proto::PeerMessage_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.PeerMessage.type)
}

// required int32 term = 2;
inline bool PeerMessage::has_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PeerMessage::set_has_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PeerMessage::clear_has_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PeerMessage::clear_term() {
  term_ = 0;
  clear_has_term();
}
inline ::google::protobuf::int32 PeerMessage::term() const {
  // @@protoc_insertion_point(field_get:proto.PeerMessage.term)
  return term_;
}
inline void PeerMessage::set_term(::google::protobuf::int32 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:proto.PeerMessage.term)
}

// required string sender_id = 3;
inline bool PeerMessage::has_sender_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeerMessage::set_has_sender_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeerMessage::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeerMessage::clear_sender_id() {
  sender_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_id();
}
inline const ::std::string& PeerMessage::sender_id() const {
  // @@protoc_insertion_point(field_get:proto.PeerMessage.sender_id)
  return sender_id_.GetNoArena();
}
inline void PeerMessage::set_sender_id(const ::std::string& value) {
  set_has_sender_id();
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PeerMessage.sender_id)
}
#if LANG_CXX11
inline void PeerMessage::set_sender_id(::std::string&& value) {
  set_has_sender_id();
  sender_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.PeerMessage.sender_id)
}
#endif
inline void PeerMessage::set_sender_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender_id();
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PeerMessage.sender_id)
}
inline void PeerMessage::set_sender_id(const char* value, size_t size) {
  set_has_sender_id();
  sender_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PeerMessage.sender_id)
}
inline ::std::string* PeerMessage::mutable_sender_id() {
  set_has_sender_id();
  // @@protoc_insertion_point(field_mutable:proto.PeerMessage.sender_id)
  return sender_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerMessage::release_sender_id() {
  // @@protoc_insertion_point(field_release:proto.PeerMessage.sender_id)
  if (!has_sender_id()) {
    return NULL;
  }
  clear_has_sender_id();
  return sender_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerMessage::set_allocated_sender_id(::std::string* sender_id) {
  if (sender_id != NULL) {
    set_has_sender_id();
  } else {
    clear_has_sender_id();
  }
  sender_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_id);
  // @@protoc_insertion_point(field_set_allocated:proto.PeerMessage.sender_id)
}

// optional bool success = 4;
inline bool PeerMessage::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PeerMessage::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PeerMessage::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PeerMessage::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool PeerMessage::success() const {
  // @@protoc_insertion_point(field_get:proto.PeerMessage.success)
  return success_;
}
inline void PeerMessage::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.PeerMessage.success)
}

// optional bool vote_granted = 5;
inline bool PeerMessage::has_vote_granted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PeerMessage::set_has_vote_granted() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PeerMessage::clear_has_vote_granted() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PeerMessage::clear_vote_granted() {
  vote_granted_ = false;
  clear_has_vote_granted();
}
inline bool PeerMessage::vote_granted() const {
  // @@protoc_insertion_point(field_get:proto.PeerMessage.vote_granted)
  return vote_granted_;
}
inline void PeerMessage::set_vote_granted(bool value) {
  set_has_vote_granted();
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:proto.PeerMessage.vote_granted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::PeerMessage_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::PeerMessage_MessageType>() {
  return ::proto::PeerMessage_MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_peermessage_2eproto
